import sqlite3
import telebot
import os
from google import genai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ .env
load_dotenv()
TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # –ö–ª—é—á –¥–ª—è Google Gemini

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Google Gemini
bot = telebot.TeleBot(TG_BOT_TOKEN)
genai_client = genai.Client(api_key=GEMINI_API_KEY)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def init_db():
    conn = sqlite3.connect("fruits_bot.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            favorite_color TEXT,
            personality TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ


# –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å Gemini API
def get_fruit_suggestion(name, age, favorite_color, personality):
    prompt = (
        f"–ß–µ–ª–æ–≤–µ–∫:\n"
        f"- –ò–º—è: {name}\n"
        f"- –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"- –õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç: {favorite_color}\n"
        f"- –õ–∏—á–Ω–æ—Å—Ç—å: {personality}\n\n"
        "–ö–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –µ–º—É –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç? –û—Ç–≤–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ—Ä—É–∫—Ç–∞, –∞ –∑–∞—Ç–µ–º –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º, –ø–æ—á–µ–º—É –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É."
    )

    response = genai_client.models.generate_content(
        model="gemini-2.0-flash", contents=prompt
    )
    
    return response.text.strip()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç-—Ç–µ—Å—Ç \"–ö–∞–∫–æ–π —Ç—ã —Ñ—Ä—É–∫—Ç?\" üçéüçåü•ù\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å! üßê\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ!\n\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:"
    )
    bot.register_next_step_handler(message, get_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=["help"])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "‚ùì *–ü–æ–º–æ—â—å* ‚ùì\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —Ç—ã —Ñ—Ä—É–∫—Ç! üçèüçìü•≠\n\n"
        "‚úÖ –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.\n"
        "‚úÖ –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "‚úÖ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å /start.\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –ø–∏—à–∏ –º–Ω–µ! üòä"
    )


# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_name(message):
    user_id = message.chat.id
    name = message.text

    conn = sqlite3.connect("fruits_bot.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, get_age)


def get_age(message):
    user_id = message.chat.id
    age = message.text

    if not age.isdigit():
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        bot.register_next_step_handler(message, get_age)
        return

    conn = sqlite3.connect("fruits_bot.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET age = ? WHERE user_id = ?", (int(age), user_id))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?")
    bot.register_next_step_handler(message, get_favorite_color)


def get_favorite_color(message):
    user_id = message.chat.id
    favorite_color = message.text

    conn = sqlite3.connect("fruits_bot.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET favorite_color = ? WHERE user_id = ?", (favorite_color, user_id))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–ö–∞–∫ –±—ã —Ç—ã –æ–ø–∏—Å–∞–ª —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å?")
    bot.register_next_step_handler(message, get_personality)

def get_personality(message):
    user_id = message.chat.id
    personality = message.text

    conn = sqlite3.connect("fruits_bot.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET personality = ? WHERE user_id = ?", (personality, user_id))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    cursor.execute("SELECT name, age, favorite_color, personality FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        name, age, favorite_color, personality = user_data
        fruit_description = get_fruit_suggestion(name, age, favorite_color, personality)
        bot.send_message(message.chat.id, f"üåü {fruit_description}")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling()
